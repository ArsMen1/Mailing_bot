import time
from datetime import datetime

from loguru import logger
from telegram import InlineKeyboardMarkup, ParseMode, KeyboardButton, ReplyKeyboardMarkup
from telegram.error import BadRequest
from telegram.ext import CallbackQueryHandler, ConversationHandler, CommandHandler, MessageHandler, Filters

from shp_mailing_bot.config import CNC_SPREADSHEET_CELLS_RANGE, INITIAL_GREETING_MESSAGE, CNC_SPREADSHEET_ID, \
    SUPER_ADMINS
from shp_mailing_bot.google_auth import authorize

IND_MAILING, SHEET_ID, LIST_NAME, COL_RANGE, INTERRUPT = range(5)

interrupt_keyboard = [['–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä']]
interrupt_markup = ReplyKeyboardMarkup(interrupt_keyboard, resize_keyboard=True, one_time_keyboard=True)


def read_data(sheets_service):
    sheet = sheets_service.spreadsheets()
    result = sheet.values().get(spreadsheetId=CNC_SPREADSHEET_ID, range=CNC_SPREADSHEET_CELLS_RANGE).execute()
    values = result.get('values', [])
    return values


def read_nps(sheet_data, chat_id):
    nps = None
    for row in sheet_data:
        if row[0] == str(chat_id):
            nps = row[9]
    if not nps:
        return 'NPS not found'
    return nps


def check_access(update, context) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—É—Å–∫–∞—é—â–µ–≥–æ –∫–æ–º–∞–Ω–¥—É —Ä–∞—Å—Å—ã–ª–∫–∏

    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —á–∞—Ç–µ –∏ –∏–º–µ–µ—Ç —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞/—Å–æ–∑–¥–∞—Ç–µ–ª—è/—É—á–∞—Å—Ç–Ω–∏–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è True. –ò–Ω–∞—á–µ False

    :param update: —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è
    :todo: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∑–∞—á–µ–º —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ handler'–∞
    """
    logger.debug('–ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /check_access')
    try:
        chat_member = context.bot.getChatMember(-589285277, update.message.chat_id)
        print(f"{chat_member=}")
        return chat_member.status in ['administrator', 'creator', 'member']
    except BadRequest:

        return False


def send_nps(context) -> None:
    job = context.job
    context_data = job.context
    nps = read_nps(context.bot_data['sheet_data'], context_data)
    context.bot.send_message(context_data, text=nps)


def send_messages(context) -> None:
    job = context.job
    query = job.context
    message = context.bot.send_message(query.from_user.id, text='–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')
    i = 0
    for row in context.bot_data['sheet_data']:
        if row[0]:
            context.bot.send_message(int(row[0]), text=row[9])
            i += 1
            message.edit_text(f'–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–π: {i}')
            time.sleep(0.1)
    context.bot.send_message(query.from_user.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')


def button(update, context) -> None:
    """
    [–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ] –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ (—Ç–∞–º, –≥–¥–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏).
    """
    query = update.callback_query
    query.answer()
    if query.data == 'NPS':
        context.job_queue.run_once(send_nps, 0, context=query.from_user.id)
    if query.data == 'send messages':
        context.job_queue.run_once(send_messages, 0, context=query)


def start_command(update, context) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã `/start`
    """
    is_admin = check_access(update, context)
    keyboard_user = [
        [
        ]
    ]

    keyboard_admin2 = [[KeyboardButton('text')]]
    reply_markup_user = InlineKeyboardMarkup(keyboard_user)
    reply_markup_admin = ReplyKeyboardMarkup(keyboard=keyboard_admin2, resize_keyboard=True, one_time_keyboard=True)

    if is_admin:
        update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=reply_markup_admin)
    else:
        update.message.reply_text(
            INITIAL_GREETING_MESSAGE,
            reply_markup=reply_markup_user,
            parse_mode=ParseMode.MARKDOWN
        )


def get_group_sheet(user_data):
    service = authorize()
    sheet = service.spreadsheets()
    lst = user_data['list_id']
    result = sheet.values().get(spreadsheetId=user_data['sheet_id'], range=f'{lst}!A1:K1000').execute()
    values = result.get('values', [])
    return values


def start2(update):
    keyboard = [
        ['–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞'],
        ['–ì—Ä—É–ø–ø–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True, one_time_keyboard=True)
    update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É', reply_markup=reply_markup)
    return IND_MAILING


def ind_mailing(update, context):
    text = update.message.text
    context.user_data['choise'] = text
    update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ id –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã', reply_markup=interrupt_markup)
    return SHEET_ID


def add_sheet_id(update, context):
    text = update.message.text
    context.user_data['sheet_id'] = text
    update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞', reply_markup=interrupt_markup)
    return LIST_NAME


def add_list_name(update, context):
    text = update.message.text
    context.user_data['list_id'] = text
    update.message.reply_text('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–æ–º–µ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ', reply_markup=interrupt_markup)
    return COL_RANGE


def add_col_range(update, context):
    """
    –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    """

    text = update.message.text
    context.user_data['col_range'] = text
    data = get_group_sheet(context.user_data)
    message = context.bot.send_message(update.effective_chat.id, text='–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...')
    send_messages_amount = 0
    who_message_was_not_sent_to = []
    chat_id_ind = data[0].index('chat id')
    user_name_ind = data[0].index('user')
    begin_ind, end_ind = tuple(map(int, context.user_data['col_range'].split(' ')))

    for row in data:
        if len(row) > chat_id_ind and row[chat_id_ind].isdigit():
            text = ' '.join(row[begin_ind:end_ind + 1])
            logger.info(row[begin_ind:end_ind + 1])
            logger.info(text)
            time.sleep(0.1)
            try:
                context.bot.send_message(row[chat_id_ind], text=text, parse_mode=ParseMode.MARKDOWN)
                send_messages_amount += 1
                message.edit_text(f'–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è... –£–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª: {send_messages_amount}')
            except BadRequest as ex:
                who_message_was_not_sent_to.append(row[user_name_ind])
                logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–µ—Ç–∞–ª–∏: {ex}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {row[user_name_ind]}')
                # todo: –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –¥—Ä—É–≥—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            except Exception as ex:
                who_message_was_not_sent_to.append(row[user_name_ind])
                logger.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –î–µ—Ç–∞–ª–∏: {ex}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {row[user_name_ind]}')

    logger.info(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {send_messages_amount}')
    logger.info(f'–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {who_message_was_not_sent_to}')

    if who_message_was_not_sent_to:
        message.edit_text(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. \n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {send_messages_amount}' + ".\n" +
                          f'–ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(who_message_was_not_sent_to)}\n' +
                          '–ö–æ–º—É –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:\n' + ",\n".join(who_message_was_not_sent_to) + "." + "\nüëâüèªüëàüèª")
    else:
        message.edit_text(f'–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. \n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {send_messages_amount}. \n' +
                          f'–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã üòé')

    # superadmins mailing
    for admin_name, admin_id in SUPER_ADMINS.items():
        context.bot.send_message(admin_id,
                                 text="*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å—Å—ã–ª–∫–µ*üì®\n\n" +
                                      f"*–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å*: @{update.message.from_user.username}\n\n" +
                                      f"*–°–æ–æ–±—â–µ–Ω–∏–µ:* \n{text}",
                                 parse_mode=ParseMode.MARKDOWN)

    return ConversationHandler.END


def back_to_menu(update, context):
    context.user_data.clear()
    start2(update)


def stop_conversation(update):
    update.message.reply_text("–ü–æ–∫–∞-–ø–æ–∫–∞")
    return ConversationHandler.END


def init_dispatcher(updater):
    """
    –ó–∞–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–æ—Ç–∞ (—Ç–µ—Ö –∫–æ–º–∞–Ω–¥, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –±—É–¥–µ—Ç —Å–ø–æ—Å–æ–±–µ–Ω —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å)
    """
    logger.debug('–ò–Ω–∏–Ω—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤')
    dispatcher = updater.dispatcher

    logger.debug('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start')
    dispatcher.add_handler(CommandHandler('start', start_command))

    logger.debug('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /check_access')
    dispatcher.add_handler(CommandHandler('check_access', check_access))

    logger.debug('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫')
    dispatcher.add_handler(CallbackQueryHandler(button))

    logger.debug('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start2')
    states = {
        IND_MAILING: [MessageHandler(Filters.regex('^–ì—Ä—É–ø–ø–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞$'), ind_mailing)],
        SHEET_ID: [MessageHandler(Filters.regex('^(?!–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä).*$'), add_sheet_id)],
        LIST_NAME: [MessageHandler(Filters.regex('^(?!–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä).*$'), add_list_name)],
        COL_RANGE: [MessageHandler(Filters.regex('^(?!–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä).*$'), add_col_range)],
    }
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start2', start2)
        ],
        states=states,
        fallbacks=[
            MessageHandler(Filters.regex('^–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä$'), stop_conversation)
        ]
    )
    dispatcher.add_handler(conv_handler)
    logger.info('–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
