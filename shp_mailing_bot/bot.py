import mailing_bot.shp_mailing_bot.config as config
from random import choice
from time import sleep

from loguru import logger

from telegram import Update, ParseMode, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, \
    CallbackQueryHandler, Handler

from mailing_bot.shp_mailing_bot.google_sheets_info import get_values_from_sheet

logger.add('debug.log', encoding="utf8", rotation='10 MB', compression='zip')

GET_KD_LINK_BUTTON = "–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π"

GET_INDICATORS_BUTTON = "–ú–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"

GET_MAIN_MENU_INDICATORS = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
GET_CURR_NPS_DETAILING_BUTTON = "NPS –ø–æ –≥—Ä—É–ø–ø–∞–º"
GET_SEMESTERS_DETAILING_BUTTON = "NPS –ø–æ —Å–µ–º–µ—Å—Ç—Ä–∞–º"
GET_GRADE_INFO_BUTTON = "–ì—Ä–µ–π–¥"

GET_NEXT_SEM_NPS = "–°–ª–µ–¥—É—é—â–∏–π"
GET_PREV_SEM_NPS = "–ü—Ä–µ–¥—ã–¥—É—â–∏–π"


def get_prep_indicators(values: list, prep_id: int) -> tuple:  # table info parser
    # getting average info
    average_nps = values[0][2]
    average_retirement = values[0][3]

    nps = 0
    retirement = 0
    redflags = 0

    # getting prep info
    for prep_info in values:
        if prep_info[1].isdigit() and int(prep_info[1]) == prep_id:
            logger.debug(prep_info)
            if len(prep_info) >= 3:  # if nps and no retirement and no redflags
                nps = prep_info[2]
            if len(prep_info) >= 4:  # if nps and retirement and no redflags
                retirement = prep_info[3]
            if len(prep_info) >= 5:  # if nps and retirement and redflags
                redflags = prep_info[4]
    return nps, retirement, average_nps, average_retirement, redflags


def evaluation_indicator(nps: str = None, retirement: str = None) -> str:  # get comment for nps or retirement
    if nps and nps[-1] == "%":
        nps = float(nps.replace(",", ".")[:-1])
    if retirement and retirement[-1] == "%":
        retirement = retirement.replace(",", ".")[:-1]

    if (nps and nps >= config.TOP_BAR_NPS) or \
            (retirement and float(retirement) <= config.TOP_BAR_RETIREMENT):
        return choice(config.EXCELLENT_INDICATORS_COMMENTS)

    elif (nps and config.MEDIUM_BAR_NPS <= nps < config.TOP_BAR_NPS) or \
            (retirement and config.MEDIUM_BAR_RETIREMENT >= float(retirement) >= config.TOP_BAR_RETIREMENT):
        return choice(config.GOOD_INDICATORS_COMMENTS)

    elif (nps and nps < config.MEDIUM_BAR_NPS) or \
            (retirement and float(retirement) > config.MEDIUM_BAR_RETIREMENT):
        return choice(config.BAD_INDICATORS_COMMENTS)


def start_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""

    user = update.effective_user
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.name}")

    update.message.reply_text(
        f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name} üôÇ')

    keyboard_start = [
        [
            KeyboardButton(GET_INDICATORS_BUTTON),
            KeyboardButton(GET_KD_LINK_BUTTON)
        ]
    ]
    keyboard_markup = ReplyKeyboardMarkup(keyboard=keyboard_start, resize_keyboard=True)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard_markup)


def get_kd_link_action(update: Update, context: CallbackContext) -> None:  # get knowledge base link button
    keyboard = [
        [
            InlineKeyboardButton("–ë–∞–∑–∞ –ó–Ω–∞–Ω–∏–π", url=config.KNOWLEDGE_BASE_LINK)
        ]
    ]
    keyboard_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(choice(config.DB_PHRASES), reply_markup=keyboard_markup)


def main_menu_indicators_action(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    keyboard = [
        [InlineKeyboardButton(GET_CURR_NPS_DETAILING_BUTTON, callback_data=GET_CURR_NPS_DETAILING_BUTTON)],
        [InlineKeyboardButton(GET_SEMESTERS_DETAILING_BUTTON, callback_data=GET_SEMESTERS_DETAILING_BUTTON)],
        [InlineKeyboardButton(GET_GRADE_INFO_BUTTON, callback_data=GET_GRADE_INFO_BUTTON)]
    ]
    keyboard_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", reply_markup=keyboard_markup)


def get_indicators_action(update: Update, context: CallbackContext) -> None:
    message = update.message.reply_text("–°–µ–∫—É–Ω–¥–æ—á–∫—É, —á–∏—á–∞—Å –ø–æ–∏—â—É")

    prep_id = update.effective_user.id
    values = get_values_from_sheet()

    nps, retirement, average_nps, average_retirement, redflags = get_prep_indicators(values, prep_id)

    redflags_message = ""
    if redflags:
        redflags_message = f"\n\n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–¥—Ñ–ª–∞–≥–æ–≤ ‚Äî {redflags}.*\n" \
                           f"–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–¥–ª–∞–≥–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é."

    if not nps and not retirement:
        message.edit_text("–û–π, –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ üëâüèªüëàüèª\n\n"
                          "–ï—Å–ª–∏ –≤—ã –ø—Ä–µ–ø–æ–¥–∞—ë—Ç–µ –ø–µ—Ä–≤—ã–π —Å–µ–º–µ—Å—Ç—Ä, —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.\n\n"
                          "–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @ktrntrsv.")
    else:
        if nps and retirement:
            nps_evaluation = evaluation_indicator(nps=nps)
            retirement_evaluation = evaluation_indicator(retirement=retirement)

            message.edit_text(f"*–í–∞—à NPS ‚Äî {nps}*.\n"
                              f"–°—Ä–µ–¥–Ω–∏–π NPS –ø–æ —à–∫–æ–ª–µ ‚Äî {average_nps}.\n"
                              f"üí≠ `{nps_evaluation}`\n\n"
                              f"*–í–∞—à–∞ –≤—ã–±—ã–≤–∞–µ–º–æ—Å—Ç—å ‚Äî {retirement}*.\n"
                              f"–°—Ä–µ–¥–Ω—è—è –≤—ã–±—ã–≤–∞–µ–º–æ—Å—Ç—å –ø–æ —à–∫–æ–ª–µ ‚Äî {average_retirement}.\n"
                              f"üí≠ `{retirement_evaluation}`" + redflags_message, parse_mode=ParseMode.MARKDOWN)

        elif nps and not retirement:
            message.edit_text(f"*–í–∞—à NPS ‚Äî {nps}*.\n"
                              f"–°—Ä–µ–¥–Ω–∏–π NPS –ø–æ —à–∫–æ–ª–µ ‚Äî {average_nps}.\n"
                              f"üí≠ `{evaluation_indicator(nps=nps)}`\n\n"
                              "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–π –≤—ã–±—ã–≤–∞–µ–º–æ—Å—Ç–∏ —è –Ω–µ –Ω–∞—à—ë–ª üßê \n"
                              "–ï—Å–ª–∏ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @ktrntrsv " + redflags_message,
                              parse_mode=ParseMode.MARKDOWN)

        elif retirement and not nps:
            message.edit_text(f"*–í–∞—à–∞ –≤—ã–±—ã–≤–∞–µ–º–æ—Å—Ç—å ‚Äî {retirement}*.\n"
                              f"–°—Ä–µ–¥–Ω—è—è –≤—ã–±—ã–≤–∞–µ–º–æ—Å—Ç—å –ø–æ —à–∫–æ–ª–µ ‚Äî {average_retirement}.\n"
                              f"üí≠ `{evaluation_indicator(retirement=retirement)}\n\n"
                              "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É NPS —è –Ω–µ –Ω–∞—à—ë–ª üßê\n"
                              "–ï—Å–ª–∏ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @ktrntrsv" + redflags_message,
                              parse_mode=ParseMode.MARKDOWN)

        keyboard = [
            [InlineKeyboardButton(GET_CURR_NPS_DETAILING_BUTTON, callback_data=GET_CURR_NPS_DETAILING_BUTTON)],
            [InlineKeyboardButton(GET_SEMESTERS_DETAILING_BUTTON, callback_data=GET_SEMESTERS_DETAILING_BUTTON)],
            [InlineKeyboardButton(GET_GRADE_INFO_BUTTON, callback_data=GET_GRADE_INFO_BUTTON)]
        ]
        keyboard_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", reply_markup=keyboard_markup)


def get_curr_nps_detailing_action(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()

    keyboard = [
        [
            InlineKeyboardButton("–ü–æ–Ω—è—Ç–Ω–æ", callback_data=GET_MAIN_MENU_INDICATORS)
        ]
    ]

    keyboard_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("1. –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º\n2. –ö–∞–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –º–æ–π NPS?", reply_markup=keyboard_markup)


def get_next_semester_stat_action(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=GET_PREV_SEM_NPS),
         InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data=GET_NEXT_SEM_NPS)
         ],

        [
            InlineKeyboardButton("–í—Å—ë —è—Å–Ω–æ", callback_data=GET_MAIN_MENU_INDICATORS)
        ]
    ]
    keyboard_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞",
                            reply_markup=keyboard_markup)


def get_prev_semester_stat_action(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=GET_PREV_SEM_NPS),
         InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data=GET_NEXT_SEM_NPS)
         ],

        [
            InlineKeyboardButton("–í—Å—ë —è—Å–Ω–æ", callback_data=GET_MAIN_MENU_INDICATORS)
        ]
    ]
    keyboard_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞",
                            reply_markup=keyboard_markup)


def get_semester_detailing_action(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    keyboard = [
        [InlineKeyboardButton("–ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=GET_PREV_SEM_NPS),
         InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data=GET_NEXT_SEM_NPS)
         ],

        [
            InlineKeyboardButton("–í—Å—ë —è—Å–Ω–æ", callback_data=GET_MAIN_MENU_INDICATORS)
        ]
    ]
    keyboard_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text("–£ –≤–∞—Å –æ—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–º—Å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω 150-64-32.",
                            reply_markup=keyboard_markup)


def get_grade_info_action(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    keyboard = [
        [InlineKeyboardButton("–ö–∞–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è NPS?", callback_data=GET_MAIN_MENU_INDICATORS)],  # todo: change callback
        [InlineKeyboardButton("–ê –≤—ã–±—ã–≤–∞–µ–º–æ—Å—Ç—å?", callback_data=GET_MAIN_MENU_INDICATORS)],  # todo: change callback
        [InlineKeyboardButton("–ß—Ç–æ –∑–∞ —Ä–µ–¥—Ñ–ª–∞–≥–∏?", callback_data=GET_MAIN_MENU_INDICATORS)],  # todo: change callback
        [InlineKeyboardButton("–í—Å—ë —è—Å–Ω–æ, –¥–∞–≤–∞–π –æ–±—Ä–∞—Ç–Ω–æ", callback_data=GET_MAIN_MENU_INDICATORS)]
    ]
    keyboard_markup = InlineKeyboardMarkup(keyboard)
    n = " " * 8
    query.edit_message_text("*–ì—Ä–µ–π–¥ 3:*\n" +
                            n + "NPS >=83%\n" +
                            n + "–í—ã–±—ã–≤–∞–µ–º–æ—Å—Ç—å <= 7%\n" +
                            n + "ü§ë –ü—Ä–µ–º–∏—è ‚Äî 30%\n\n"
                                       "*–ì—Ä–µ–π–¥ 2:*\n" +
                            n + "NPS >= 72%\n" +
                            n + "–í—ã–±—ã–≤–∞–µ–º–æ—Å—Ç—å <= 10%\n" +
                            n + "üí∞ –ü—Ä–µ–º–∏—è ‚Äî 15%\n\n"
                                       "*–ì—Ä–µ–π–¥ 1:*\n" +
                            n + "NPS  >= 60%\n" +
                            n + "–í—ã–±—ã–≤–∞–µ–º–æ—Å—Ç—å <= 13%\n" +
                            n + "üíµ –ü—Ä–µ–º–∏—è ‚Äî 5%\n\n"
                                       "*–ì—Ä–µ–π–¥ 0:*\n" +
                            n + "NPS  < 60%\n" +
                            n + "–í—ã–±—ã–≤–∞–µ–º–æ—Å—Ç—å > 13%\n" +
                            n + "üí∏ –ü—Ä–µ–º–∏—è ‚Äî 0%\n\n"
                                       "*–ò—Ç–æ–≥–æ–≤—ã–π –≥—Ä–µ–π–¥ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–∑ –¥–≤—É—Ö –≥—Ä–µ–π–¥–æ–≤ –ø–æ NPS –∏ –ø–æ –≤—ã–±—ã–≤–∞–µ–º–æ—Å—Ç–∏*.\n\n"
                            "–†–µ–¥—Ñ–ª–∞–≥–∏ —Ç–æ–∂–µ –≤–ª–∏—è—é—Ç –Ω–∞ –ø—Ä–µ–º–∏—é, –Ω–æ —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω—è–ª–∞, –∫–∞–∫. –ü–æ–ø–æ–∑–∂–µ –∑–∞–π–¥–∏",
                            parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard_markup)


def undefined_message_button(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–Ω—è—Ç–∏–π–Ω–æ ü•∫\n–Ø –µ—â—ë –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Ä—É—Å—Å–∫–∏, —è –º–æ–ª–æ–¥–æ–π –±–æ—Ç")


def init_dispatcher(updater: Update):
    logger.debug('–ò–Ω–∏–Ω—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤')
    dispatcher = updater.dispatcher

    logger.debug('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start')
    dispatcher.add_handler(CommandHandler("start", start_command))

    logger.debug('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫')
    dispatcher.add_handler(
        MessageHandler(Filters.regex('^' + GET_INDICATORS_BUTTON + '$'), get_indicators_action))

    dispatcher.add_handler(
        MessageHandler(Filters.regex('^' + GET_KD_LINK_BUTTON + '$'), get_kd_link_action))

    dispatcher.add_handler(
        CallbackQueryHandler(main_menu_indicators_action, pattern=GET_MAIN_MENU_INDICATORS))

    dispatcher.add_handler(
        CallbackQueryHandler(get_curr_nps_detailing_action, pattern=GET_CURR_NPS_DETAILING_BUTTON))

    dispatcher.add_handler(
        CallbackQueryHandler(get_semester_detailing_action, pattern=GET_SEMESTERS_DETAILING_BUTTON))

    dispatcher.add_handler(
        CallbackQueryHandler(get_next_semester_stat_action, pattern=GET_NEXT_SEM_NPS))

    dispatcher.add_handler(
        CallbackQueryHandler(get_prev_semester_stat_action, pattern=GET_PREV_SEM_NPS))

    dispatcher.add_handler(
        CallbackQueryHandler(get_grade_info_action, pattern=GET_GRADE_INFO_BUTTON))

    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, undefined_message_button))

    logger.info('–î–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
