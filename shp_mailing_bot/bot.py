from telegram import Update, ParseMode
from telegram.ext import CommandHandler, MessageHandler, Filters, CallbackContext, \
    CallbackQueryHandler

import shp_mailing_bot.handlers.get_prep_indicators_semester_navigation
from logger_bot import logger
from shp_mailing_bot.config import RESPONSIBLE_FOR_THE_BOT, GET_NEXT_SEM, GET_PREV_SEM
from shp_mailing_bot.message_creator import get_name_patronymic, are_you_really_prep_message

from shp_mailing_bot.handlers import get_prep_indicators_main, knowledge_base_link, get_support_ea_tg
from shp_mailing_bot.prep import Prep


def start_action(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    prep = Prep(update.effective_user.id, update.effective_user.name)
    if not prep.status:
        update.message.reply_text(are_you_really_prep_message)
        return
    update.message.reply_text(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {get_name_patronymic(prep.name)}! '
                              f'–†–∞–¥, —á—Ç–æ –≤—ã –∑–∞–≥–ª—è–Ω—É–ª–∏ –∫–æ –º–Ω–µ –≤ –≥–æ—Å—Ç–∏ :)\n\n'
                              f'*–Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –®–∫–æ–ª—ã –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–≤.* '
                              f'–Ø –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω—ã–π ‚ò∫Ô∏è\n\n'
                              f'‚ñ´Ô∏è–ë—É–¥—É *–ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é*, '
                              f'–∫–æ—Ç–æ—Ä—É—é –º–Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç –º–æ–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã. –¢–æ–ª—å–∫–æ —Ç—Å—Å ü§´\n'
                              f'‚ñ´Ô∏è–¢–∞–∫–∂–µ –≤ –º–æ–µ–π –∫–Ω–∏–∂–µ—á–∫–µ –∑–∞–ø–∏—Å–∞–Ω—ã *–≤–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏* (NPS, –≤—ã–±—ã–≤–∞–µ–º–æ—Å—Ç—å, –≥—Ä–µ–π–¥), '
                              f'–∫–æ—Ç–æ—Ä—ã–º–∏ —è –º–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ —Å–µ–∫—Ä–µ—Ç—É.\n'
                              f'‚ñ´ –ê –µ—â—ë, –µ—Å–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –º–æ—é –ø–æ–¥—Ä—É–≥—É *–ë–∞–∑—É –ó–Ω–∞–Ω–∏–π*, —è –ø–æ–º–æ–≥—É –µ–µ –Ω–∞–π—Ç–∏.\n\n'
                              f'\n–î–∞–≤–∞–π—Ç–µ –æ—Å–º–æ—Ç—Ä–∏–º—Å—è, –≤–≤–µ–¥–∏—Ç–µ "/" –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.',
                              parse_mode=ParseMode.MARKDOWN)
    # update.message.reply_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {get_name_patronymic(prep.name)}.")
    logger.info(f'[{prep.prep_tg_name}] start message sent.')


def help_action(update: Update, context: CallbackContext):
    update.message.reply_text(
        '–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å–æ –º–Ω–æ–π, '
        '—á—É–≤—Å—Ç–≤—É–µ—Ç–µ –∑–ª–æ—Å—Ç—å, –Ω–µ–≥–æ–¥–æ–≤–∞–Ω–∏–µ, –æ–±–∏–¥—É, –ø—Ä–µ–∑—Ä–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Ç–µ—Ä—è–Ω–Ω–æ—Å—Ç—å, '
        '–≤–¥–æ—Ö–Ω–∏—Ç–µ –∏ –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ –Ω–∞ 10 —Å—á—ë—Ç–æ–≤ üßò \n\n'
        f'–ê –ø–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ {RESPONSIBLE_FOR_THE_BOT}. \n–≠—Ç–æ –º–æ—è –º–∞–º–æ—á–∫–∞, –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.')
    logger.info(f"[{update.effective_user.name}] help message sent.")


def undefined_message_action(update: Update, context: CallbackContext):
    update.message.reply_text('–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –ø–æ–Ω—è—Ç–∏–π–Ω–æ ü•∫\n'
                              '–Ø –µ—â—ë –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ –≥–æ–≤–æ—Ä–∏—Ç—å —Ä—É—Å—Å–∫–∏, —è –º–æ–ª–æ–¥–æ–π –±–æ—Ç. \n'
                              '–ò—Å–ø–æ–ª—å–∑—É–π—Ç—ç –∫–æ–º–∞–Ω–¥–∞ —Å "/"')
    logger.info(f"[{update.effective_user.name}] wrote bullshit")


def init_dispatcher(updater: Update):
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler('start', start_action))

    dispatcher.add_handler(CommandHandler('help', help_action))

    dispatcher.add_handler(CommandHandler('get_indicators', get_prep_indicators_main.get_indicators_action))

    dispatcher.add_handler(CallbackQueryHandler(
        shp_mailing_bot.handlers.get_prep_indicators_semester_navigation.get_prev_sem_indicators_action,
        pattern=GET_PREV_SEM))
    # get previous semester handler

    dispatcher.add_handler(CallbackQueryHandler(
        shp_mailing_bot.handlers.get_prep_indicators_semester_navigation.get_next_sem_indicators_action,
        pattern=GET_NEXT_SEM))
    # get next semester handler

    dispatcher.add_handler(CommandHandler('knowledge_base', knowledge_base_link.get_kd_link_action))

    dispatcher.add_handler(CommandHandler('get_support_eduApp', get_support_ea_tg.get_support_ea))

    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, undefined_message_action))

    logger.info('Dispatcher initialized successfully.')
